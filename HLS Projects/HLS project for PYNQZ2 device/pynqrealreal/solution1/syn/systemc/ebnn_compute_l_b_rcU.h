// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __ebnn_compute_l_b_rcU_H__
#define __ebnn_compute_l_b_rcU_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct ebnn_compute_l_b_rcU_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 10;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(ebnn_compute_l_b_rcU_ram) {
        ram[0] = "0b01000001111001001100011001000101";
        ram[1] = "0b01000001111111001110111110001000";
        ram[2] = "0b01000001111010010001010101100101";
        ram[3] = "0b01000001110100101000111111110100";
        ram[4] = "0b01000001101111100111100101100011";
        ram[5] = "0b01000001101110000110100101110011";
        ram[6] = "0b01000001110100010010011110010101";
        ram[7] = "0b01000001111010100000111000110001";
        ram[8] = "0b01000001101010100111000000000000";
        ram[9] = "0b01000001110001000110110110001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(ebnn_compute_l_b_rcU) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 10;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


ebnn_compute_l_b_rcU_ram* meminst;


SC_CTOR(ebnn_compute_l_b_rcU) {
meminst = new ebnn_compute_l_b_rcU_ram("ebnn_compute_l_b_rcU_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~ebnn_compute_l_b_rcU() {
    delete meminst;
}


};//endmodule
#endif
