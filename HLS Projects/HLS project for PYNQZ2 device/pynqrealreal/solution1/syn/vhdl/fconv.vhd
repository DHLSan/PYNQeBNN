-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fconv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    F_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_start_idx : IN STD_LOGIC_VECTOR (8 downto 0);
    Bias : IN STD_LOGIC_VECTOR (31 downto 0);
    Gamma : IN STD_LOGIC_VECTOR (31 downto 0);
    Beta : IN STD_LOGIC_VECTOR (31 downto 0);
    Mean : IN STD_LOGIC_VECTOR (31 downto 0);
    Std : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fconv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_80000001 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv31_7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_in_cast_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_in_cast_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal pl_i_fu_341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal pl_i_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal pl_i_pl_w_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_i_pl_w_cast_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_in_cast_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_in_cast_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal pl_j_fu_367_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal pl_j_reg_793 : STD_LOGIC_VECTOR (3 downto 0);
    signal pl_j_pl_h_cast_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_j_pl_h_cast_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_in_1_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fdot_3d_fu_244_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fdot_3d_fu_244_ap_done : STD_LOGIC;
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_2_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_in_1_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_in_1_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_assign_2_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_assign_3_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_8_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal C_addr_reg_868 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fdot_3d_fu_244_ap_start : STD_LOGIC;
    signal grp_fdot_3d_fu_244_ap_idle : STD_LOGIC;
    signal grp_fdot_3d_fu_244_ap_ready : STD_LOGIC;
    signal grp_fdot_3d_fu_244_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fdot_3d_fu_244_A_ce0 : STD_LOGIC;
    signal i_in_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_in_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal pl_i_assign_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_res_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal pl_i_assign_1_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal max_res_1_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_res_2_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_fdot_3d_fu_244_ap_start : STD_LOGIC := '0';
    signal tmp_1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_idx_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_idx_cast_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_idx_2_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_shift1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_shift_3_cast_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_mask_2_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_mask_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_mask_1_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_284_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_shift_fu_288_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast1_fu_294_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_idx_fu_308_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal pl_i_pl_w_fu_353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal pl_j_pl_h_fu_379_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_to_int_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_res_1_to_int_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_466_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_476_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_484_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_494_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_assign_to_int_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_578_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_621_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i6_fu_611_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_cast_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_664_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_678_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_shift_1_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_694_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_shift_2_cast_fu_688_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_shift_2_fu_702_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_257_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_270_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);

    component fdot_3d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_offset : IN STD_LOGIC_VECTOR (4 downto 0);
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ebnn_compute_fadddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ebnn_compute_fmuleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ebnn_compute_fdivfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ebnn_compute_fcmpg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_fdot_3d_fu_244 : component fdot_3d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fdot_3d_fu_244_ap_start,
        ap_done => grp_fdot_3d_fu_244_ap_done,
        ap_idle => grp_fdot_3d_fu_244_ap_idle,
        ap_ready => grp_fdot_3d_fu_244_ap_ready,
        A_address0 => grp_fdot_3d_fu_244_A_address0,
        A_ce0 => grp_fdot_3d_fu_244_A_ce0,
        A_q0 => A_q0,
        B_offset => F_offset,
        x => i_reg_809,
        y => j_reg_818,
        ap_return => grp_fdot_3d_fu_244_ap_return);

    ebnn_compute_fadddEe_U9 : component ebnn_compute_fadddEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        opcode => grp_fu_257_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    ebnn_compute_fmuleOg_U10 : component ebnn_compute_fmuleOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => f_assign_2_reg_853,
        din1 => Gamma,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    ebnn_compute_fdivfYi_U11 : component ebnn_compute_fdivfYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_277,
        din1 => Std,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    ebnn_compute_fcmpg8j_U12 : component ebnn_compute_fcmpg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        opcode => grp_fu_270_opcode,
        dout => grp_fu_270_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fdot_3d_fu_244_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fdot_3d_fu_244_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_32_fu_449_p3 = ap_const_lv1_0) and (tmp_9_fu_416_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_fdot_3d_fu_244_ap_start <= ap_const_logic_1;
                elsif ((grp_fdot_3d_fu_244_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_fdot_3d_fu_244_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_idx_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                c_idx_1_fu_100 <= c_idx_2_fu_645_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_idx_1_fu_100 <= c_idx_cast_fu_318_p1;
            end if; 
        end if;
    end process;

    c_mask_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                c_mask_2_fu_108 <= c_mask_1_fu_625_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_mask_2_fu_108 <= c_mask_fu_302_p2;
            end if; 
        end if;
    end process;

    c_shift1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                                c_shift1_fu_104(30 downto 0) <= c_shift_3_cast_fu_710_p1(30 downto 0);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                c_shift1_fu_104(30 downto 0) <= p_cast_fu_298_p1(30 downto 0);
            end if; 
        end if;
    end process;

    i_in_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_373_p2 = ap_const_lv1_0))) then 
                i_in_reg_166 <= pl_i_reg_775;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_in_reg_166 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_in_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_347_p2 = ap_const_lv1_1))) then 
                j_in_reg_177 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_in_reg_177 <= pl_j_reg_793;
            end if; 
        end if;
    end process;

    max_res_1_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_res_1_reg_220 <= max_res_2_reg_232;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_389_p2 = ap_const_lv1_1))) then 
                max_res_1_reg_220 <= max_res_reg_198;
            end if; 
        end if;
    end process;

    max_res_2_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_32_fu_449_p3 = ap_const_lv1_1) and (tmp_9_fu_416_p2 = ap_const_lv1_1))) then 
                max_res_2_reg_232 <= max_res_1_reg_220;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_823 = ap_const_lv1_0))) then 
                max_res_2_reg_232 <= res_2_fu_545_p3;
            end if; 
        end if;
    end process;

    max_res_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_9_fu_416_p2 = ap_const_lv1_0))) then 
                max_res_reg_198 <= max_res_1_reg_220;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_373_p2 = ap_const_lv1_1))) then 
                max_res_reg_198 <= ap_const_lv32_FF7FFFFF;
            end if; 
        end if;
    end process;

    pl_i_assign_1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                pl_i_assign_1_reg_210 <= j_in_1_reg_848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_389_p2 = ap_const_lv1_1))) then 
                pl_i_assign_1_reg_210 <= j_in_cast_reg_788;
            end if; 
        end if;
    end process;

    pl_i_assign_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_9_fu_416_p2 = ap_const_lv1_0))) then 
                pl_i_assign_reg_188 <= i_in_1_fu_457_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_373_p2 = ap_const_lv1_1))) then 
                pl_i_assign_reg_188 <= i_in_cast_reg_770;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                C_addr_reg_868 <= tmp_1_fu_606_p1(7 - 1 downto 0);
                tmp_8_reg_863 <= tmp_8_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                f_assign_2_reg_853 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                f_assign_3_reg_858 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    i_in_cast_reg_770(3 downto 0) <= i_in_cast_fu_337_p1(3 downto 0);
                pl_i_reg_775 <= pl_i_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_389_p2 = ap_const_lv1_1))) then
                i_reg_809 <= i_fu_408_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_in_1_reg_848 <= j_in_1_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    j_in_cast_reg_788(3 downto 0) <= j_in_cast_fu_363_p1(3 downto 0);
                pl_j_reg_793 <= pl_j_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_9_fu_416_p2 = ap_const_lv1_1))) then
                j_reg_818 <= j_fu_435_p3;
                tmp_32_reg_823 <= tmp_10_fu_444_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_347_p2 = ap_const_lv1_1))) then
                    pl_i_pl_w_cast_reg_783(3 downto 0) <= pl_i_pl_w_cast_fu_359_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_373_p2 = ap_const_lv1_1))) then
                    pl_j_pl_h_cast_reg_801(3 downto 0) <= pl_j_pl_h_cast_fu_385_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state42))) then
                reg_277 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fdot_3d_fu_244_ap_done = ap_const_logic_1))) then
                res_reg_832 <= grp_fdot_3d_fu_244_ap_return;
                tmp_18_reg_838 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    i_in_cast_reg_770(31 downto 4) <= "0000000000000000000000000000";
    pl_i_pl_w_cast_reg_783(31 downto 4) <= "0000000000000000000000000000";
    j_in_cast_reg_788(31 downto 4) <= "0000000000000000000000000000";
    pl_j_pl_h_cast_reg_801(31 downto 4) <= "0000000000000000000000000000";
    c_shift1_fu_104(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_347_p2, ap_CS_fsm_state3, tmp_4_fu_373_p2, ap_CS_fsm_state4, tmp_5_fu_389_p2, ap_CS_fsm_state5, tmp_9_fu_416_p2, tmp_32_fu_449_p3, ap_CS_fsm_state6, grp_fdot_3d_fu_244_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_347_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_373_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_9_fu_416_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_32_fu_449_p3 = ap_const_lv1_1) and (tmp_9_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fdot_3d_fu_244_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_fdot_3d_fu_244_A_address0;
    A_ce0 <= grp_fdot_3d_fu_244_A_ce0;

    C_address0_assign_proc : process(ap_CS_fsm_state43, C_addr_reg_868, ap_CS_fsm_state44, tmp_1_fu_606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            C_address0 <= C_addr_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            C_address0 <= tmp_1_fu_606_p1(7 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    C_d0_proc : process(C_q0, tmp_26_fu_664_p1, tmp_8_reg_863)
    begin
        C_d0 <= C_q0;
        if to_integer(unsigned(tmp_26_fu_664_p1)) >= C_q0'low and to_integer(unsigned(tmp_26_fu_664_p1)) <= C_q0'high then
            C_d0(to_integer(unsigned(tmp_26_fu_664_p1))) <= tmp_8_reg_863(0);
        end if;
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_fu_347_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_347_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_s_fu_347_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_347_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_idx_2_fu_645_p2 <= std_logic_vector(unsigned(c_idx_1_fu_100) + unsigned(tmp_26_cast_fu_641_p1));
    c_idx_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_idx_fu_308_p4),32));
    c_idx_fu_308_p4 <= c_start_idx(8 downto 3);
    c_mask_1_fu_625_p3 <= (tmp_27_fu_621_p1 & tmp_i6_fu_611_p4);
    c_mask_fu_302_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & p_cast1_fu_294_p1(8-1 downto 0)))));
    c_shift_1_fu_682_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(c_shift1_fu_104));
    c_shift_2_cast_fu_688_p2 <= std_logic_vector(signed(ap_const_lv31_7FFFFFFF) + signed(tmp_28_fu_678_p1));
    c_shift_2_fu_702_p3 <= 
        ap_const_lv31_7 when (tmp_29_fu_694_p3(0) = '1') else 
        c_shift_2_cast_fu_688_p2;
    c_shift_3_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_shift_2_fu_702_p3),32));
    c_shift_fu_288_p2 <= (tmp_15_fu_284_p1 xor ap_const_lv3_7);
    f_assign_to_int_fu_564_p1 <= reg_277;
    grp_fdot_3d_fu_244_ap_start <= ap_reg_grp_fdot_3d_fu_244_ap_start;

    grp_fu_257_opcode_assign_proc : process(ap_CS_fsm_state4, tmp_5_fu_389_p2, ap_CS_fsm_state13, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_257_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_5_fu_389_p2 = ap_const_lv1_0)))) then 
            grp_fu_257_opcode <= ap_const_lv2_0;
        else 
            grp_fu_257_opcode <= "XX";
        end if; 
    end process;


    grp_fu_257_p0_assign_proc : process(reg_277, ap_CS_fsm_state4, f_assign_3_reg_858, max_res_reg_198, ap_CS_fsm_state13, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_257_p0 <= f_assign_3_reg_858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_257_p0 <= reg_277;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_257_p0 <= max_res_reg_198;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p1_assign_proc : process(Bias, Beta, Mean, ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_257_p1 <= Beta;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_257_p1 <= Mean;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_257_p1 <= Bias;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_270_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_270_opcode <= ap_const_lv5_2;
        else 
            grp_fu_270_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_270_p0_assign_proc : process(reg_277, grp_fdot_3d_fu_244_ap_return, ap_CS_fsm_state6, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_270_p0 <= reg_277;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_270_p0 <= grp_fdot_3d_fu_244_ap_return;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state43, max_res_1_reg_220)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_270_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_270_p1 <= max_res_1_reg_220;
        else 
            grp_fu_270_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_408_p3 <= 
        ap_const_lv32_80000001 when (tmp_17_fu_394_p3(0) = '1') else 
        tmp_19_fu_402_p2;
    i_in_1_fu_457_p2 <= std_logic_vector(unsigned(pl_i_assign_reg_188) + unsigned(ap_const_lv32_1));
    i_in_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_in_reg_166),32));
    j_fu_435_p3 <= 
        ap_const_lv32_80000001 when (tmp_30_fu_421_p3(0) = '1') else 
        tmp_31_fu_429_p2;
    j_in_1_fu_552_p2 <= std_logic_vector(unsigned(pl_i_assign_1_reg_210) + unsigned(ap_const_lv32_1));
    j_in_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_in_reg_177),32));
    max_res_1_to_int_fu_480_p1 <= max_res_1_reg_220;
    notlhs3_fu_498_p2 <= "0" when (tmp_11_fu_466_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_516_p2 <= "0" when (tmp_12_fu_484_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_582_p2 <= "0" when (tmp_fu_568_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_504_p2 <= "1" when (tmp_33_fu_476_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_522_p2 <= "1" when (tmp_34_fu_494_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_588_p2 <= "1" when (tmp_25_fu_578_p1 = ap_const_lv23_0) else "0";
    p_cast1_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_shift_fu_288_p2),8));
    p_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_shift_fu_288_p2),32));
    pl_i_fu_341_p2 <= std_logic_vector(unsigned(i_in_reg_166) + unsigned(ap_const_lv4_2));
    pl_i_pl_w_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pl_i_pl_w_fu_353_p2),32));
    pl_i_pl_w_fu_353_p2 <= std_logic_vector(unsigned(i_in_reg_166) + unsigned(ap_const_lv4_3));
    pl_j_fu_367_p2 <= std_logic_vector(unsigned(j_in_reg_177) + unsigned(ap_const_lv4_2));
    pl_j_pl_h_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pl_j_pl_h_fu_379_p2),32));
    pl_j_pl_h_fu_379_p2 <= std_logic_vector(unsigned(j_in_reg_177) + unsigned(ap_const_lv4_3));
    res_2_fu_545_p3 <= 
        res_reg_832 when (tmp_20_fu_540_p2(0) = '1') else 
        max_res_1_reg_220;
    res_to_int_fu_463_p1 <= res_reg_832;
    tmp_10_fu_444_p2 <= (j_fu_435_p3 or i_reg_809);
    tmp_11_fu_466_p4 <= res_to_int_fu_463_p1(30 downto 23);
    tmp_12_fu_484_p4 <= max_res_1_to_int_fu_480_p1(30 downto 23);
    tmp_13_fu_510_p2 <= (notrhs4_fu_504_p2 or notlhs3_fu_498_p2);
    tmp_14_fu_528_p2 <= (notrhs6_fu_522_p2 or notlhs5_fu_516_p2);
    tmp_15_fu_284_p1 <= c_start_idx(3 - 1 downto 0);
    tmp_16_fu_534_p2 <= (tmp_14_fu_528_p2 and tmp_13_fu_510_p2);
    tmp_17_fu_394_p3 <= pl_i_assign_reg_188(31 downto 31);
    tmp_19_fu_402_p2 <= std_logic_vector(shift_left(unsigned(pl_i_assign_reg_188),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
        tmp_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_idx_1_fu_100),64));

    tmp_20_fu_540_p2 <= (tmp_18_reg_838 and tmp_16_fu_534_p2);
    tmp_25_fu_578_p1 <= f_assign_to_int_fu_564_p1(23 - 1 downto 0);
    tmp_26_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_633_p3),32));
    tmp_26_fu_664_p1 <= c_shift1_fu_104(8 - 1 downto 0);
    tmp_27_fu_621_p1 <= c_mask_2_fu_108(1 - 1 downto 0);
    tmp_28_fu_678_p1 <= c_shift1_fu_104(31 - 1 downto 0);
    tmp_29_fu_694_p3 <= c_shift_1_fu_682_p2(31 downto 31);
    tmp_30_fu_421_p3 <= pl_i_assign_1_reg_210(31 downto 31);
    tmp_31_fu_429_p2 <= std_logic_vector(shift_left(unsigned(pl_i_assign_1_reg_210),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_32_fu_449_p3 <= tmp_10_fu_444_p2(31 downto 31);
    tmp_33_fu_476_p1 <= res_to_int_fu_463_p1(23 - 1 downto 0);
    tmp_34_fu_494_p1 <= max_res_1_to_int_fu_480_p1(23 - 1 downto 0);
    tmp_3_fu_633_p3 <= (ap_const_lv7_0 & tmp_27_fu_621_p1);
    tmp_4_fu_373_p2 <= "1" when (unsigned(pl_j_fu_367_p2) < unsigned(ap_const_lv4_D)) else "0";
    tmp_5_fu_389_p2 <= "1" when (signed(pl_i_assign_reg_188) < signed(pl_i_pl_w_cast_reg_783)) else "0";
    tmp_6_fu_594_p2 <= (notrhs_fu_588_p2 or notlhs_fu_582_p2);
    tmp_8_fu_600_p2 <= (tmp_6_fu_594_p2 and grp_fu_270_p2);
    tmp_9_fu_416_p2 <= "1" when (signed(pl_i_assign_1_reg_210) < signed(pl_j_pl_h_cast_reg_801)) else "0";
    tmp_fu_568_p4 <= f_assign_to_int_fu_564_p1(30 downto 23);
    tmp_i6_fu_611_p4 <= c_mask_2_fu_108(7 downto 1);
    tmp_s_fu_347_p2 <= "1" when (unsigned(pl_i_fu_341_p2) < unsigned(ap_const_lv4_D)) else "0";
end behav;
