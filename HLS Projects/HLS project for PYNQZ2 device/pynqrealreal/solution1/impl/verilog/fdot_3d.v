// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fdot_3d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_offset,
        x,
        y,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
input  [4:0] B_offset;
input  [31:0] x;
input  [31:0] y;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] l_conv_pool_bn_bst0_6_address0;
reg    l_conv_pool_bn_bst0_6_ce0;
wire   [7:0] l_conv_pool_bn_bst0_6_q0;
wire   [2:0] bits_address0;
reg    bits_ce0;
wire   [7:0] bits_q0;
wire   [31:0] x_kw_fu_164_p2;
reg   [31:0] x_kw_reg_419;
wire   [31:0] y_kh_fu_170_p2;
reg   [31:0] y_kh_reg_424;
wire   [5:0] B_offset_cast_fu_176_p1;
reg   [5:0] B_offset_cast_reg_429;
wire   [31:0] tmp_1_fu_190_p2;
reg   [31:0] tmp_1_reg_437;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_185_p2;
wire   [31:0] tmp_i1_fu_208_p2;
reg   [31:0] tmp_i1_reg_442;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_fu_214_p2;
wire   [0:0] tmp_10_fu_229_p3;
reg   [0:0] tmp_10_reg_455;
wire   [5:0] sum_i_fu_277_p2;
reg   [5:0] sum_i_reg_460;
wire   [2:0] tmp_11_fu_282_p1;
reg   [2:0] tmp_11_reg_465;
wire   [2:0] tmp_12_fu_286_p1;
reg   [2:0] tmp_12_reg_470;
wire   [31:0] tmp_3_fu_290_p2;
reg   [31:0] tmp_3_reg_475;
wire   [31:0] j_1_fu_296_p2;
wire   [31:0] a1_fu_316_p3;
reg   [31:0] a1_reg_485;
wire    ap_CS_fsm_state4;
wire   [31:0] k_1_fu_360_p2;
reg   [31:0] k_1_reg_501;
wire   [31:0] tmp_9_fu_391_p3;
reg   [31:0] tmp_9_reg_506;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] res_3_reg_516;
wire    ap_CS_fsm_state10;
reg   [31:0] i_assign_reg_114;
reg   [31:0] b_idx_1_reg_124;
reg   [31:0] j_assign_reg_136;
wire    ap_CS_fsm_state11;
reg   [31:0] n_assign_reg_146;
wire  signed [63:0] tmp_7_fu_224_p1;
wire  signed [63:0] sum_i_cast_fu_324_p1;
wire  signed [63:0] tmp_4_i_fu_355_p1;
reg   [31:0] res_1_fu_56;
wire   [31:0] tmp_2_fu_196_p2;
wire   [31:0] tmp_5_fu_202_p2;
wire   [31:0] tmp_i2_fu_219_p2;
wire   [31:0] p_neg_i_fu_237_p2;
wire   [5:0] p_lshr_i_cast_fu_243_p4;
wire   [5:0] p_neg_t_i_fu_253_p2;
wire   [5:0] p_lshr_f_i_cast_fu_259_p4;
wire   [5:0] tmp_i_fu_269_p3;
wire   [31:0] tmp_fu_302_p2;
wire   [0:0] tmp_6_fu_308_p3;
wire   [31:0] p_and_t_fu_335_p3;
wire   [31:0] p_neg_t_fu_342_p2;
wire   [31:0] p_and_f_fu_328_p3;
wire   [31:0] tmp_3_i_fu_348_p3;
wire   [7:0] tmp_5_i_fu_366_p2;
wire   [31:0] tmp_37_to_int_fu_378_p1;
wire   [31:0] tmp_37_neg_fu_381_p2;
wire   [0:0] tmp_6_i_fu_372_p2;
wire   [31:0] tmp_8_fu_387_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

fdot_3d_l_conv_pobkb #(
    .DataWidth( 8 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
l_conv_pool_bn_bst0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(l_conv_pool_bn_bst0_6_address0),
    .ce0(l_conv_pool_bn_bst0_6_ce0),
    .q0(l_conv_pool_bn_bst0_6_q0)
);

fdot_3d_bits #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bits_address0),
    .ce0(bits_ce0),
    .q0(bits_q0)
);

ebnn_compute_faddcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ebnn_compute_faddcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(res_1_fu_56),
    .din1(tmp_9_reg_506),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        b_idx_1_reg_124 <= tmp_1_reg_437;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_idx_1_reg_124 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_assign_reg_114 <= j_1_fu_296_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_assign_reg_114 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_assign_reg_136 <= k_1_reg_501;
    end else if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_assign_reg_136 <= y;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_assign_reg_146 <= tmp_3_reg_475;
    end else if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        n_assign_reg_146 <= b_idx_1_reg_124;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_1_fu_56 <= res_3_reg_516;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        res_1_fu_56 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        B_offset_cast_reg_429[4 : 0] <= B_offset_cast_fu_176_p1[4 : 0];
        x_kw_reg_419 <= x_kw_fu_164_p2;
        y_kh_reg_424 <= y_kh_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a1_reg_485 <= a1_fu_316_p3;
        k_1_reg_501 <= k_1_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        res_3_reg_516 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_i_reg_460 <= sum_i_fu_277_p2;
        tmp_10_reg_455 <= n_assign_reg_146[32'd31];
        tmp_11_reg_465 <= tmp_11_fu_282_p1;
        tmp_12_reg_470 <= tmp_12_fu_286_p1;
        tmp_3_reg_475 <= tmp_3_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_437 <= tmp_1_fu_190_p2;
        tmp_i1_reg_442[31 : 2] <= tmp_i1_fu_208_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_9_reg_506 <= tmp_9_fu_391_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bits_ce0 = 1'b1;
    end else begin
        bits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l_conv_pool_bn_bst0_6_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_4_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_7_fu_224_p1;

assign B_offset_cast_fu_176_p1 = B_offset;

assign a1_fu_316_p3 = ((tmp_6_fu_308_p3[0:0] === 1'b1) ? 32'd0 : A_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = res_1_fu_56;

assign bits_address0 = tmp_4_i_fu_355_p1;

assign j_1_fu_296_p2 = (i_assign_reg_114 + 32'd1);

assign k_1_fu_360_p2 = (32'd1 + j_assign_reg_136);

assign l_conv_pool_bn_bst0_6_address0 = sum_i_cast_fu_324_p1;

assign p_and_f_fu_328_p3 = {{29'd0}, {tmp_11_reg_465}};

assign p_and_t_fu_335_p3 = {{29'd0}, {tmp_12_reg_470}};

assign p_lshr_f_i_cast_fu_259_p4 = {{n_assign_reg_146[8:3]}};

assign p_lshr_i_cast_fu_243_p4 = {{p_neg_i_fu_237_p2[8:3]}};

assign p_neg_i_fu_237_p2 = (32'd0 - n_assign_reg_146);

assign p_neg_t_fu_342_p2 = (32'd0 - p_and_t_fu_335_p3);

assign p_neg_t_i_fu_253_p2 = (6'd0 - p_lshr_i_cast_fu_243_p4);

assign sum_i_cast_fu_324_p1 = $signed(sum_i_reg_460);

assign sum_i_fu_277_p2 = (tmp_i_fu_269_p3 + B_offset_cast_reg_429);

assign tmp_10_fu_229_p3 = n_assign_reg_146[32'd31];

assign tmp_11_fu_282_p1 = n_assign_reg_146[2:0];

assign tmp_12_fu_286_p1 = p_neg_i_fu_237_p2[2:0];

assign tmp_1_fu_190_p2 = (32'd3 + b_idx_1_reg_124);

assign tmp_2_fu_196_p2 = i_assign_reg_114 << 32'd5;

assign tmp_37_neg_fu_381_p2 = (tmp_37_to_int_fu_378_p1 ^ 32'd2147483648);

assign tmp_37_to_int_fu_378_p1 = a1_reg_485;

assign tmp_3_fu_290_p2 = (32'd1 + n_assign_reg_146);

assign tmp_3_i_fu_348_p3 = ((tmp_10_reg_455[0:0] === 1'b1) ? p_neg_t_fu_342_p2 : p_and_f_fu_328_p3);

assign tmp_4_fu_214_p2 = (($signed(j_assign_reg_136) < $signed(y_kh_reg_424)) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_355_p1 = $signed(tmp_3_i_fu_348_p3);

assign tmp_5_fu_202_p2 = i_assign_reg_114 << 32'd2;

assign tmp_5_i_fu_366_p2 = (l_conv_pool_bn_bst0_6_q0 & bits_q0);

assign tmp_6_fu_308_p3 = tmp_fu_302_p2[32'd31];

assign tmp_6_i_fu_372_p2 = ((tmp_5_i_fu_366_p2 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_224_p1 = $signed(tmp_i2_fu_219_p2);

assign tmp_8_fu_387_p1 = tmp_37_neg_fu_381_p2;

assign tmp_9_fu_391_p3 = ((tmp_6_i_fu_372_p2[0:0] === 1'b1) ? tmp_8_fu_387_p1 : a1_reg_485);

assign tmp_fu_302_p2 = (j_assign_reg_136 | i_assign_reg_114);

assign tmp_i1_fu_208_p2 = (tmp_2_fu_196_p2 - tmp_5_fu_202_p2);

assign tmp_i2_fu_219_p2 = (tmp_i1_reg_442 + j_assign_reg_136);

assign tmp_i_fu_269_p3 = ((tmp_10_fu_229_p3[0:0] === 1'b1) ? p_neg_t_i_fu_253_p2 : p_lshr_f_i_cast_fu_259_p4);

assign tmp_s_fu_185_p2 = (($signed(i_assign_reg_114) < $signed(x_kw_reg_419)) ? 1'b1 : 1'b0);

assign x_kw_fu_164_p2 = (x + 32'd3);

assign y_kh_fu_170_p2 = (y + 32'd3);

always @ (posedge ap_clk) begin
    B_offset_cast_reg_429[5] <= 1'b0;
    tmp_i1_reg_442[1:0] <= 2'b00;
end

endmodule //fdot_3d
