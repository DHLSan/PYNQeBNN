// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ebnn_compute,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.388750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=12,HLS_SYN_FF=5184,HLS_SYN_LUT=7781}" *)

module ebnn_compute (
        ap_clk,
        ap_rst_n,
        s_axi_inputINT_AWVALID,
        s_axi_inputINT_AWREADY,
        s_axi_inputINT_AWADDR,
        s_axi_inputINT_WVALID,
        s_axi_inputINT_WREADY,
        s_axi_inputINT_WDATA,
        s_axi_inputINT_WSTRB,
        s_axi_inputINT_ARVALID,
        s_axi_inputINT_ARREADY,
        s_axi_inputINT_ARADDR,
        s_axi_inputINT_RVALID,
        s_axi_inputINT_RREADY,
        s_axi_inputINT_RDATA,
        s_axi_inputINT_RRESP,
        s_axi_inputINT_BVALID,
        s_axi_inputINT_BREADY,
        s_axi_inputINT_BRESP,
        s_axi_outputCONTRL_AWVALID,
        s_axi_outputCONTRL_AWREADY,
        s_axi_outputCONTRL_AWADDR,
        s_axi_outputCONTRL_WVALID,
        s_axi_outputCONTRL_WREADY,
        s_axi_outputCONTRL_WDATA,
        s_axi_outputCONTRL_WSTRB,
        s_axi_outputCONTRL_ARVALID,
        s_axi_outputCONTRL_ARREADY,
        s_axi_outputCONTRL_ARADDR,
        s_axi_outputCONTRL_RVALID,
        s_axi_outputCONTRL_RREADY,
        s_axi_outputCONTRL_RDATA,
        s_axi_outputCONTRL_RRESP,
        s_axi_outputCONTRL_BVALID,
        s_axi_outputCONTRL_BREADY,
        s_axi_outputCONTRL_BRESP,
        interrupt,
        s_axi_outputINT_AWVALID,
        s_axi_outputINT_AWREADY,
        s_axi_outputINT_AWADDR,
        s_axi_outputINT_WVALID,
        s_axi_outputINT_WREADY,
        s_axi_outputINT_WDATA,
        s_axi_outputINT_WSTRB,
        s_axi_outputINT_ARVALID,
        s_axi_outputINT_ARREADY,
        s_axi_outputINT_ARADDR,
        s_axi_outputINT_RVALID,
        s_axi_outputINT_RREADY,
        s_axi_outputINT_RDATA,
        s_axi_outputINT_RRESP,
        s_axi_outputINT_BVALID,
        s_axi_outputINT_BREADY,
        s_axi_outputINT_BRESP
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;
parameter    C_S_AXI_INPUTINT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUTINT_ADDR_WIDTH = 17;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUTCONTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUTCONTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_OUTPUTINT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUTINT_ADDR_WIDTH = 6;

parameter C_S_AXI_INPUTINT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUTCONTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUTINT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_inputINT_AWVALID;
output   s_axi_inputINT_AWREADY;
input  [C_S_AXI_INPUTINT_ADDR_WIDTH - 1:0] s_axi_inputINT_AWADDR;
input   s_axi_inputINT_WVALID;
output   s_axi_inputINT_WREADY;
input  [C_S_AXI_INPUTINT_DATA_WIDTH - 1:0] s_axi_inputINT_WDATA;
input  [C_S_AXI_INPUTINT_WSTRB_WIDTH - 1:0] s_axi_inputINT_WSTRB;
input   s_axi_inputINT_ARVALID;
output   s_axi_inputINT_ARREADY;
input  [C_S_AXI_INPUTINT_ADDR_WIDTH - 1:0] s_axi_inputINT_ARADDR;
output   s_axi_inputINT_RVALID;
input   s_axi_inputINT_RREADY;
output  [C_S_AXI_INPUTINT_DATA_WIDTH - 1:0] s_axi_inputINT_RDATA;
output  [1:0] s_axi_inputINT_RRESP;
output   s_axi_inputINT_BVALID;
input   s_axi_inputINT_BREADY;
output  [1:0] s_axi_inputINT_BRESP;
input   s_axi_outputCONTRL_AWVALID;
output   s_axi_outputCONTRL_AWREADY;
input  [C_S_AXI_OUTPUTCONTRL_ADDR_WIDTH - 1:0] s_axi_outputCONTRL_AWADDR;
input   s_axi_outputCONTRL_WVALID;
output   s_axi_outputCONTRL_WREADY;
input  [C_S_AXI_OUTPUTCONTRL_DATA_WIDTH - 1:0] s_axi_outputCONTRL_WDATA;
input  [C_S_AXI_OUTPUTCONTRL_WSTRB_WIDTH - 1:0] s_axi_outputCONTRL_WSTRB;
input   s_axi_outputCONTRL_ARVALID;
output   s_axi_outputCONTRL_ARREADY;
input  [C_S_AXI_OUTPUTCONTRL_ADDR_WIDTH - 1:0] s_axi_outputCONTRL_ARADDR;
output   s_axi_outputCONTRL_RVALID;
input   s_axi_outputCONTRL_RREADY;
output  [C_S_AXI_OUTPUTCONTRL_DATA_WIDTH - 1:0] s_axi_outputCONTRL_RDATA;
output  [1:0] s_axi_outputCONTRL_RRESP;
output   s_axi_outputCONTRL_BVALID;
input   s_axi_outputCONTRL_BREADY;
output  [1:0] s_axi_outputCONTRL_BRESP;
output   interrupt;
input   s_axi_outputINT_AWVALID;
output   s_axi_outputINT_AWREADY;
input  [C_S_AXI_OUTPUTINT_ADDR_WIDTH - 1:0] s_axi_outputINT_AWADDR;
input   s_axi_outputINT_WVALID;
output   s_axi_outputINT_WREADY;
input  [C_S_AXI_OUTPUTINT_DATA_WIDTH - 1:0] s_axi_outputINT_WDATA;
input  [C_S_AXI_OUTPUTINT_WSTRB_WIDTH - 1:0] s_axi_outputINT_WSTRB;
input   s_axi_outputINT_ARVALID;
output   s_axi_outputINT_ARREADY;
input  [C_S_AXI_OUTPUTINT_ADDR_WIDTH - 1:0] s_axi_outputINT_ARADDR;
output   s_axi_outputINT_RVALID;
input   s_axi_outputINT_RREADY;
output  [C_S_AXI_OUTPUTINT_DATA_WIDTH - 1:0] s_axi_outputINT_RDATA;
output  [1:0] s_axi_outputINT_RRESP;
output   s_axi_outputINT_BVALID;
input   s_axi_outputINT_BREADY;
output  [1:0] s_axi_outputINT_BRESP;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r_q0;
wire   [4:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
wire   [7:0] output_r_d0;
reg   [6:0] temp1_address0;
reg    temp1_ce0;
reg    temp1_we0;
reg   [7:0] temp1_d0;
wire   [7:0] temp1_q0;
wire   [3:0] l_conv_pool_bn_bst0_1_address0;
reg    l_conv_pool_bn_bst0_1_ce0;
wire   [31:0] l_conv_pool_bn_bst0_1_q0;
wire   [3:0] l_conv_pool_bn_bst0_4_address0;
reg    l_conv_pool_bn_bst0_4_ce0;
wire   [31:0] l_conv_pool_bn_bst0_4_q0;
wire   [3:0] l_conv_pool_bn_bst0_3_address0;
reg    l_conv_pool_bn_bst0_3_ce0;
wire   [31:0] l_conv_pool_bn_bst0_3_q0;
wire   [3:0] l_conv_pool_bn_bst0_5_address0;
reg    l_conv_pool_bn_bst0_5_ce0;
wire   [31:0] l_conv_pool_bn_bst0_5_q0;
wire   [3:0] l_conv_pool_bn_bst0_s_address0;
reg    l_conv_pool_bn_bst0_s_ce0;
wire   [31:0] l_conv_pool_bn_bst0_s_q0;
wire   [8:0] l_b_linear_bn_softma_6_address0;
reg    l_b_linear_bn_softma_6_ce0;
wire   [7:0] l_b_linear_bn_softma_6_q0;
wire   [3:0] l_b_linear_bn_softma_1_address0;
reg    l_b_linear_bn_softma_1_ce0;
wire   [31:0] l_b_linear_bn_softma_1_q0;
wire   [3:0] l_b_linear_bn_softma_4_address0;
reg    l_b_linear_bn_softma_4_ce0;
wire   [31:0] l_b_linear_bn_softma_4_q0;
wire   [3:0] l_b_linear_bn_softma_3_address0;
reg    l_b_linear_bn_softma_3_ce0;
wire   [31:0] l_b_linear_bn_softma_3_q0;
wire   [3:0] l_b_linear_bn_softma_5_address0;
reg    l_b_linear_bn_softma_5_ce0;
wire   [31:0] l_b_linear_bn_softma_5_q0;
wire   [3:0] l_b_linear_bn_softma_address0;
reg    l_b_linear_bn_softma_ce0;
wire   [31:0] l_b_linear_bn_softma_q0;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] reg_461;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state49;
wire   [5:0] i_fu_474_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] j_2_i_fu_491_p2;
reg   [3:0] j_2_i_reg_902;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_i_fu_485_p2;
wire   [4:0] f_idx_i_fu_506_p3;
reg   [4:0] f_idx_i_reg_932;
wire    ap_CS_fsm_state4;
reg   [31:0] l_conv_pool_bn_bst0_8_reg_937;
reg   [31:0] l_conv_pool_bn_bst0_10_reg_942;
reg   [31:0] l_conv_pool_bn_bst0_12_reg_947;
reg   [31:0] l_conv_pool_bn_bst0_14_reg_952;
reg   [31:0] l_conv_pool_bn_bst0_16_reg_957;
wire   [8:0] tmp_17_i_fu_515_p2;
reg   [8:0] tmp_17_i_reg_962;
wire   [8:0] next_mul_fu_521_p2;
reg   [8:0] next_mul_reg_967;
wire    ap_CS_fsm_state6;
wire   [31:0] max_idx_i_i_cast5_fu_527_p1;
reg   [31:0] max_idx_i_i_cast5_reg_972;
wire   [3:0] j_i_i_fu_537_p2;
reg   [3:0] j_i_i_reg_980;
wire   [5:0] i_1_fu_554_p2;
reg   [5:0] i_1_reg_988;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_548_p2;
wire   [1:0] tmp_30_fu_681_p4;
reg   [1:0] tmp_30_reg_1008;
wire    ap_CS_fsm_state8;
wire   [1:0] tmp_46_fu_715_p1;
reg   [1:0] tmp_46_reg_1013;
reg   [2:0] tmp_32_reg_1018;
wire   [9:0] res_fu_782_p2;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_77_i_i_fu_788_p1;
reg   [63:0] tmp_77_i_i_reg_1028;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_453_p1;
reg   [31:0] res_i_i_reg_1041;
wire    ap_CS_fsm_state14;
reg   [31:0] l_b_linear_bn_softma_9_reg_1046;
wire    ap_CS_fsm_state18;
reg   [31:0] l_b_linear_bn_softma_15_reg_1056;
wire    ap_CS_fsm_state23;
reg   [31:0] l_b_linear_bn_softma_17_reg_1066;
wire    ap_CS_fsm_state39;
reg   [31:0] l_b_linear_bn_softma_11_reg_1081;
wire    ap_CS_fsm_state40;
reg   [31:0] l_b_linear_bn_softma_13_reg_1086;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] f_assign_6_reg_1091;
wire   [31:0] grp_fu_445_p2;
reg   [31:0] f_assign_7_reg_1096;
wire    ap_CS_fsm_state44;
wire   [0:0] tmp_25_fu_456_p2;
reg   [0:0] tmp_25_reg_1101;
wire    ap_CS_fsm_state50;
wire   [31:0] max_idx_2_i_i_fu_876_p3;
wire    ap_CS_fsm_state51;
wire   [31:0] max_res_1_i_i_fu_883_p3;
wire    grp_fconv_fu_416_ap_start;
wire    grp_fconv_fu_416_ap_done;
wire    grp_fconv_fu_416_ap_idle;
wire    grp_fconv_fu_416_ap_ready;
wire   [13:0] grp_fconv_fu_416_A_address0;
wire    grp_fconv_fu_416_A_ce0;
wire   [6:0] grp_fconv_fu_416_C_address0;
wire    grp_fconv_fu_416_C_ce0;
wire    grp_fconv_fu_416_C_we0;
wire   [7:0] grp_fconv_fu_416_C_d0;
reg   [5:0] i_i_reg_310;
wire   [0:0] exitcond1_fu_468_p2;
reg   [3:0] j_i_reg_321;
wire    ap_CS_fsm_state5;
reg   [8:0] c_idx_1_i_reg_333;
reg   [3:0] max_idx_i_i_reg_345;
reg   [31:0] max_idx_1_i_i_reg_357;
reg   [31:0] max_res_i_i_reg_369;
reg   [8:0] phi_mul_reg_381;
reg   [5:0] i_i1_reg_393;
wire   [0:0] exitcond_i_i_fu_531_p2;
reg   [9:0] res_i_reg_404;
reg    ap_reg_grp_fconv_fu_416_ap_start;
wire   [63:0] tmp_14_i_fu_480_p1;
wire   [63:0] tmp_16_i_fu_497_p1;
wire   [63:0] tmp_35_i_fu_560_p1;
wire   [63:0] sum3_i_cast_fu_575_p1;
reg   [31:0] grp_fu_441_p0;
reg   [31:0] grp_fu_441_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state25;
wire  signed [31:0] grp_fu_453_p0;
wire   [8:0] tmp_35_i_cast_fu_565_p1;
wire   [8:0] sum3_i_fu_569_p2;
wire   [10:0] tmp_38_i_fu_580_p3;
wire   [10:0] res_3_fu_588_p2;
wire   [7:0] tmp_fu_599_p2;
wire   [7:0] v_assign_fu_605_p2;
wire   [0:0] tmp_38_fu_611_p3;
wire   [0:0] tmp_42_fu_619_p3;
wire   [0:0] tmp_44_fu_627_p3;
wire   [0:0] tmp_45_fu_635_p3;
wire   [6:0] tmp_3_i_i_fu_643_p8;
wire   [7:0] tmp_3_i_i_cast_fu_661_p1;
wire   [7:0] c_fu_665_p2;
wire   [1:0] tmp_29_fu_671_p4;
wire   [5:0] tmp_6_i_i_fu_691_p4;
wire   [1:0] tmp_31_fu_705_p4;
wire   [5:0] tmp_7_i_i_fu_719_p4;
wire   [6:0] tmp_6_i_i_cast_fu_701_p1;
wire   [6:0] tmp_7_i_i_cast_fu_729_p1;
wire   [6:0] c_1_fu_733_p2;
wire   [3:0] tmp_27_fu_749_p3;
wire   [3:0] tmp_28_fu_756_p3;
wire   [3:0] tmp_i_i_cast_fu_769_p1;
wire   [3:0] tmp_9_i_i_cast3_fu_763_p2;
wire   [3:0] tmp_1_i_i_fu_772_p2;
wire   [9:0] tmp_2_i_i_cast_fu_778_p1;
wire   [31:0] f_assign_8_to_int_fu_793_p1;
wire   [31:0] max_res_i_i_to_int_fu_811_p1;
wire   [7:0] tmp_s_fu_797_p4;
wire   [22:0] tmp_36_fu_807_p1;
wire   [0:0] notrhs_fu_835_p2;
wire   [0:0] notlhs_fu_829_p2;
wire   [7:0] tmp_21_fu_815_p4;
wire   [22:0] tmp_37_fu_825_p1;
wire   [0:0] notrhs1_fu_853_p2;
wire   [0:0] notlhs1_fu_847_p2;
wire   [0:0] tmp_22_fu_841_p2;
wire   [0:0] tmp_23_fu_859_p2;
wire   [0:0] tmp_24_fu_865_p2;
wire   [0:0] tmp_26_fu_871_p2;
reg   [1:0] grp_fu_441_opcode;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_reg_grp_fconv_fu_416_ap_start = 1'b0;
end

ebnn_compute_temp1 #(
    .DataWidth( 8 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
temp1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp1_address0),
    .ce0(temp1_ce0),
    .we0(temp1_we0),
    .d0(temp1_d0),
    .q0(temp1_q0)
);

ebnn_compute_l_cohbi #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_conv_pool_bn_bst0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_conv_pool_bn_bst0_1_address0),
    .ce0(l_conv_pool_bn_bst0_1_ce0),
    .q0(l_conv_pool_bn_bst0_1_q0)
);

ebnn_compute_l_coibs #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_conv_pool_bn_bst0_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_conv_pool_bn_bst0_4_address0),
    .ce0(l_conv_pool_bn_bst0_4_ce0),
    .q0(l_conv_pool_bn_bst0_4_q0)
);

ebnn_compute_l_cojbC #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_conv_pool_bn_bst0_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_conv_pool_bn_bst0_3_address0),
    .ce0(l_conv_pool_bn_bst0_3_ce0),
    .q0(l_conv_pool_bn_bst0_3_q0)
);

ebnn_compute_l_cokbM #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_conv_pool_bn_bst0_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_conv_pool_bn_bst0_5_address0),
    .ce0(l_conv_pool_bn_bst0_5_ce0),
    .q0(l_conv_pool_bn_bst0_5_q0)
);

ebnn_compute_l_colbW #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_conv_pool_bn_bst0_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_conv_pool_bn_bst0_s_address0),
    .ce0(l_conv_pool_bn_bst0_s_ce0),
    .q0(l_conv_pool_bn_bst0_s_q0)
);

ebnn_compute_l_b_mb6 #(
    .DataWidth( 8 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
l_b_linear_bn_softma_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_6_address0),
    .ce0(l_b_linear_bn_softma_6_ce0),
    .q0(l_b_linear_bn_softma_6_q0)
);

ebnn_compute_l_b_ncg #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_b_linear_bn_softma_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_1_address0),
    .ce0(l_b_linear_bn_softma_1_ce0),
    .q0(l_b_linear_bn_softma_1_q0)
);

ebnn_compute_l_b_ocq #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_b_linear_bn_softma_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_4_address0),
    .ce0(l_b_linear_bn_softma_4_ce0),
    .q0(l_b_linear_bn_softma_4_q0)
);

ebnn_compute_l_b_pcA #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_b_linear_bn_softma_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_3_address0),
    .ce0(l_b_linear_bn_softma_3_ce0),
    .q0(l_b_linear_bn_softma_3_q0)
);

ebnn_compute_l_b_qcK #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_b_linear_bn_softma_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_5_address0),
    .ce0(l_b_linear_bn_softma_5_ce0),
    .q0(l_b_linear_bn_softma_5_q0)
);

ebnn_compute_l_b_rcU #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
l_b_linear_bn_softma_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(l_b_linear_bn_softma_address0),
    .ce0(l_b_linear_bn_softma_ce0),
    .q0(l_b_linear_bn_softma_q0)
);

ebnn_compute_inputINT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUTINT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUTINT_DATA_WIDTH ))
ebnn_compute_inputINT_s_axi_U(
    .AWVALID(s_axi_inputINT_AWVALID),
    .AWREADY(s_axi_inputINT_AWREADY),
    .AWADDR(s_axi_inputINT_AWADDR),
    .WVALID(s_axi_inputINT_WVALID),
    .WREADY(s_axi_inputINT_WREADY),
    .WDATA(s_axi_inputINT_WDATA),
    .WSTRB(s_axi_inputINT_WSTRB),
    .ARVALID(s_axi_inputINT_ARVALID),
    .ARREADY(s_axi_inputINT_ARREADY),
    .ARADDR(s_axi_inputINT_ARADDR),
    .RVALID(s_axi_inputINT_RVALID),
    .RREADY(s_axi_inputINT_RREADY),
    .RDATA(s_axi_inputINT_RDATA),
    .RRESP(s_axi_inputINT_RRESP),
    .BVALID(s_axi_inputINT_BVALID),
    .BREADY(s_axi_inputINT_BREADY),
    .BRESP(s_axi_inputINT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r_address0(grp_fconv_fu_416_A_address0),
    .input_r_ce0(grp_fconv_fu_416_A_ce0),
    .input_r_q0(input_r_q0)
);

ebnn_compute_outputCONTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUTCONTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUTCONTRL_DATA_WIDTH ))
ebnn_compute_outputCONTRL_s_axi_U(
    .AWVALID(s_axi_outputCONTRL_AWVALID),
    .AWREADY(s_axi_outputCONTRL_AWREADY),
    .AWADDR(s_axi_outputCONTRL_AWADDR),
    .WVALID(s_axi_outputCONTRL_WVALID),
    .WREADY(s_axi_outputCONTRL_WREADY),
    .WDATA(s_axi_outputCONTRL_WDATA),
    .WSTRB(s_axi_outputCONTRL_WSTRB),
    .ARVALID(s_axi_outputCONTRL_ARVALID),
    .ARREADY(s_axi_outputCONTRL_ARREADY),
    .ARADDR(s_axi_outputCONTRL_ARADDR),
    .RVALID(s_axi_outputCONTRL_RVALID),
    .RREADY(s_axi_outputCONTRL_RREADY),
    .RDATA(s_axi_outputCONTRL_RDATA),
    .RRESP(s_axi_outputCONTRL_RRESP),
    .BVALID(s_axi_outputCONTRL_BVALID),
    .BREADY(s_axi_outputCONTRL_BREADY),
    .BRESP(s_axi_outputCONTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ebnn_compute_outputINT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUTINT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUTINT_DATA_WIDTH ))
ebnn_compute_outputINT_s_axi_U(
    .AWVALID(s_axi_outputINT_AWVALID),
    .AWREADY(s_axi_outputINT_AWREADY),
    .AWADDR(s_axi_outputINT_AWADDR),
    .WVALID(s_axi_outputINT_WVALID),
    .WREADY(s_axi_outputINT_WREADY),
    .WDATA(s_axi_outputINT_WDATA),
    .WSTRB(s_axi_outputINT_WSTRB),
    .ARVALID(s_axi_outputINT_ARVALID),
    .ARREADY(s_axi_outputINT_ARREADY),
    .ARADDR(s_axi_outputINT_ARADDR),
    .RVALID(s_axi_outputINT_RVALID),
    .RREADY(s_axi_outputINT_RREADY),
    .RDATA(s_axi_outputINT_RDATA),
    .RRESP(s_axi_outputINT_RRESP),
    .BVALID(s_axi_outputINT_BVALID),
    .BREADY(s_axi_outputINT_BREADY),
    .BRESP(s_axi_outputINT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0)
);

fconv grp_fconv_fu_416(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fconv_fu_416_ap_start),
    .ap_done(grp_fconv_fu_416_ap_done),
    .ap_idle(grp_fconv_fu_416_ap_idle),
    .ap_ready(grp_fconv_fu_416_ap_ready),
    .A_address0(grp_fconv_fu_416_A_address0),
    .A_ce0(grp_fconv_fu_416_A_ce0),
    .A_q0(input_r_q0),
    .F_offset(f_idx_i_reg_932),
    .C_address0(grp_fconv_fu_416_C_address0),
    .C_ce0(grp_fconv_fu_416_C_ce0),
    .C_we0(grp_fconv_fu_416_C_we0),
    .C_d0(grp_fconv_fu_416_C_d0),
    .C_q0(temp1_q0),
    .c_start_idx(c_idx_1_i_reg_333),
    .Bias(l_conv_pool_bn_bst0_8_reg_937),
    .Gamma(l_conv_pool_bn_bst0_10_reg_942),
    .Beta(l_conv_pool_bn_bst0_12_reg_947),
    .Mean(l_conv_pool_bn_bst0_14_reg_952),
    .Std(l_conv_pool_bn_bst0_16_reg_957)
);

ebnn_compute_fadddEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ebnn_compute_fadddEe_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_441_p0),
    .din1(grp_fu_441_p1),
    .opcode(grp_fu_441_opcode),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

ebnn_compute_fmuleOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ebnn_compute_fmuleOg_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(f_assign_6_reg_1091),
    .din1(l_b_linear_bn_softma_11_reg_1081),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

ebnn_compute_fdivfYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ebnn_compute_fdivfYi_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_461),
    .din1(l_b_linear_bn_softma_17_reg_1066),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

ebnn_compute_sitosc4 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ebnn_compute_sitosc4_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_453_p0),
    .ce(1'b1),
    .dout(grp_fu_453_p1)
);

ebnn_compute_fcmpg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ebnn_compute_fcmpg8j_U30(
    .din0(reg_461),
    .din1(max_res_i_i_reg_369),
    .opcode(5'd2),
    .dout(tmp_25_fu_456_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fconv_fu_416_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_reg_grp_fconv_fu_416_ap_start <= 1'b1;
        end else if ((grp_fconv_fu_416_ap_ready == 1'b1)) begin
            ap_reg_grp_fconv_fu_416_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_468_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_idx_1_i_reg_333 <= 9'd0;
    end else if (((grp_fconv_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_idx_1_i_reg_333 <= tmp_17_i_reg_962;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_531_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_i1_reg_393 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_i1_reg_393 <= i_1_reg_988;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_468_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_reg_310 <= i_fu_474_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_310 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_468_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_321 <= 4'd0;
    end else if (((grp_fconv_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_i_reg_321 <= j_2_i_reg_902;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        max_idx_i_i_reg_345 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        max_idx_i_i_reg_345 <= j_i_i_reg_980;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        max_res_i_i_reg_369 <= 32'd4286578687;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        max_res_i_i_reg_369 <= max_res_1_i_i_fu_883_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_381 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        phi_mul_reg_381 <= next_mul_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_fu_531_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        res_i_reg_404 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_i_reg_404 <= res_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        f_assign_6_reg_1091 <= grp_fu_449_p2;
        l_b_linear_bn_softma_11_reg_1081 <= l_b_linear_bn_softma_4_q0;
        l_b_linear_bn_softma_13_reg_1086 <= l_b_linear_bn_softma_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        f_assign_7_reg_1096 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_idx_i_reg_932[4 : 1] <= f_idx_i_fu_506_p3[4 : 1];
        l_conv_pool_bn_bst0_10_reg_942 <= l_conv_pool_bn_bst0_4_q0;
        l_conv_pool_bn_bst0_12_reg_947 <= l_conv_pool_bn_bst0_3_q0;
        l_conv_pool_bn_bst0_14_reg_952 <= l_conv_pool_bn_bst0_5_q0;
        l_conv_pool_bn_bst0_16_reg_957 <= l_conv_pool_bn_bst0_s_q0;
        l_conv_pool_bn_bst0_8_reg_937 <= l_conv_pool_bn_bst0_1_q0;
        tmp_17_i_reg_962 <= tmp_17_i_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_988 <= i_1_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_i_reg_902 <= j_2_i_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_i_i_reg_980 <= j_i_i_fu_537_p2;
        max_idx_i_i_cast5_reg_972[3 : 0] <= max_idx_i_i_cast5_fu_527_p1[3 : 0];
        next_mul_reg_967 <= next_mul_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        l_b_linear_bn_softma_15_reg_1056 <= l_b_linear_bn_softma_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        l_b_linear_bn_softma_17_reg_1066 <= l_b_linear_bn_softma_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        l_b_linear_bn_softma_9_reg_1046 <= l_b_linear_bn_softma_1_q0;
        res_i_i_reg_1041 <= grp_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        max_idx_1_i_i_reg_357 <= max_idx_2_i_i_fu_876_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_461 <= grp_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_25_reg_1101 <= tmp_25_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_30_reg_1008 <= {{c_fu_665_p2[3:2]}};
        tmp_32_reg_1018 <= {{c_1_fu_733_p2[6:4]}};
        tmp_46_reg_1013 <= tmp_46_fu_715_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_77_i_i_reg_1028[3 : 0] <= tmp_77_i_i_fu_788_p1[3 : 0];
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_441_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_441_opcode = 2'd0;
    end else begin
        grp_fu_441_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_441_p0 = f_assign_7_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_441_p0 = reg_461;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_441_p0 = res_i_i_reg_1041;
    end else begin
        grp_fu_441_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_441_p1 = l_b_linear_bn_softma_13_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_441_p1 = l_b_linear_bn_softma_15_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_441_p1 = l_b_linear_bn_softma_9_reg_1046;
    end else begin
        grp_fu_441_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        l_b_linear_bn_softma_1_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        l_b_linear_bn_softma_3_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        l_b_linear_bn_softma_4_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        l_b_linear_bn_softma_5_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        l_b_linear_bn_softma_6_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        l_b_linear_bn_softma_ce0 = 1'b1;
    end else begin
        l_b_linear_bn_softma_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_conv_pool_bn_bst0_1_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_conv_pool_bn_bst0_3_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_conv_pool_bn_bst0_4_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_conv_pool_bn_bst0_5_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_conv_pool_bn_bst0_s_ce0 = 1'b1;
    end else begin
        l_conv_pool_bn_bst0_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_fu_531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp1_address0 = tmp_35_i_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_address0 = tmp_14_i_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp1_address0 = grp_fconv_fu_416_C_address0;
    end else begin
        temp1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        temp1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp1_ce0 = grp_fconv_fu_416_C_ce0;
    end else begin
        temp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp1_d0 = grp_fconv_fu_416_C_d0;
    end else begin
        temp1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond1_fu_468_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        temp1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp1_we0 = grp_fconv_fu_416_C_we0;
    end else begin
        temp1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_468_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_485_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_fconv_fu_416_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_i_i_fu_531_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_733_p2 = (tmp_6_i_i_cast_fu_701_p1 + tmp_7_i_i_cast_fu_729_p1);

assign c_fu_665_p2 = (v_assign_fu_605_p2 - tmp_3_i_i_cast_fu_661_p1);

assign exitcond1_fu_468_p2 = ((i_i_reg_310 == 6'd45) ? 1'b1 : 1'b0);

assign exitcond_fu_548_p2 = ((i_i1_reg_393 == 6'd45) ? 1'b1 : 1'b0);

assign exitcond_i_fu_485_p2 = ((j_i_reg_321 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_531_p2 = ((max_idx_i_i_reg_345 == 4'd10) ? 1'b1 : 1'b0);

assign f_assign_8_to_int_fu_793_p1 = reg_461;

assign f_idx_i_fu_506_p3 = {{j_i_reg_321}, {1'd0}};

assign grp_fconv_fu_416_ap_start = ap_reg_grp_fconv_fu_416_ap_start;

assign grp_fu_453_p0 = $signed(res_3_fu_588_p2);

assign i_1_fu_554_p2 = (i_i1_reg_393 + 6'd1);

assign i_fu_474_p2 = (i_i_reg_310 + 6'd1);

assign j_2_i_fu_491_p2 = (j_i_reg_321 + 4'd1);

assign j_i_i_fu_537_p2 = (max_idx_i_i_reg_345 + 4'd1);

assign l_b_linear_bn_softma_1_address0 = tmp_77_i_i_fu_788_p1;

assign l_b_linear_bn_softma_3_address0 = tmp_77_i_i_reg_1028;

assign l_b_linear_bn_softma_4_address0 = tmp_77_i_i_reg_1028;

assign l_b_linear_bn_softma_5_address0 = tmp_77_i_i_reg_1028;

assign l_b_linear_bn_softma_6_address0 = sum3_i_cast_fu_575_p1;

assign l_b_linear_bn_softma_address0 = tmp_77_i_i_reg_1028;

assign l_conv_pool_bn_bst0_1_address0 = tmp_16_i_fu_497_p1;

assign l_conv_pool_bn_bst0_3_address0 = tmp_16_i_fu_497_p1;

assign l_conv_pool_bn_bst0_4_address0 = tmp_16_i_fu_497_p1;

assign l_conv_pool_bn_bst0_5_address0 = tmp_16_i_fu_497_p1;

assign l_conv_pool_bn_bst0_s_address0 = tmp_16_i_fu_497_p1;

assign max_idx_2_i_i_fu_876_p3 = ((tmp_26_fu_871_p2[0:0] === 1'b1) ? max_idx_i_i_cast5_reg_972 : max_idx_1_i_i_reg_357);

assign max_idx_i_i_cast5_fu_527_p1 = max_idx_i_i_reg_345;

assign max_res_1_i_i_fu_883_p3 = ((tmp_26_fu_871_p2[0:0] === 1'b1) ? reg_461 : max_res_i_i_reg_369);

assign max_res_i_i_to_int_fu_811_p1 = max_res_i_i_reg_369;

assign next_mul_fu_521_p2 = (phi_mul_reg_381 + 9'd45);

assign notlhs1_fu_847_p2 = ((tmp_21_fu_815_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_829_p2 = ((tmp_s_fu_797_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_853_p2 = ((tmp_37_fu_825_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_835_p2 = ((tmp_36_fu_807_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = 64'd0;

assign output_r_d0 = max_idx_1_i_i_reg_357[7:0];

assign res_3_fu_588_p2 = ($signed(11'd1688) + $signed(tmp_38_i_fu_580_p3));

assign res_fu_782_p2 = (tmp_2_i_i_cast_fu_778_p1 + res_i_reg_404);

assign sum3_i_cast_fu_575_p1 = sum3_i_fu_569_p2;

assign sum3_i_fu_569_p2 = (tmp_35_i_cast_fu_565_p1 + phi_mul_reg_381);

assign tmp_14_i_fu_480_p1 = i_i_reg_310;

assign tmp_16_i_fu_497_p1 = j_i_reg_321;

assign tmp_17_i_fu_515_p2 = (c_idx_1_i_reg_333 + 9'd36);

assign tmp_1_i_i_fu_772_p2 = (tmp_i_i_cast_fu_769_p1 + tmp_9_i_i_cast3_fu_763_p2);

assign tmp_21_fu_815_p4 = {{max_res_i_i_to_int_fu_811_p1[30:23]}};

assign tmp_22_fu_841_p2 = (notrhs_fu_835_p2 | notlhs_fu_829_p2);

assign tmp_23_fu_859_p2 = (notrhs1_fu_853_p2 | notlhs1_fu_847_p2);

assign tmp_24_fu_865_p2 = (tmp_23_fu_859_p2 & tmp_22_fu_841_p2);

assign tmp_26_fu_871_p2 = (tmp_25_reg_1101 & tmp_24_fu_865_p2);

assign tmp_27_fu_749_p3 = {{2'd0}, {tmp_46_reg_1013}};

assign tmp_28_fu_756_p3 = {{2'd0}, {tmp_30_reg_1008}};

assign tmp_29_fu_671_p4 = {{c_fu_665_p2[7:6]}};

assign tmp_2_i_i_cast_fu_778_p1 = tmp_1_i_i_fu_772_p2;

assign tmp_30_fu_681_p4 = {{c_fu_665_p2[3:2]}};

assign tmp_31_fu_705_p4 = {{c_fu_665_p2[5:4]}};

assign tmp_35_i_cast_fu_565_p1 = i_i1_reg_393;

assign tmp_35_i_fu_560_p1 = i_i1_reg_393;

assign tmp_36_fu_807_p1 = f_assign_8_to_int_fu_793_p1[22:0];

assign tmp_37_fu_825_p1 = max_res_i_i_to_int_fu_811_p1[22:0];

assign tmp_38_fu_611_p3 = v_assign_fu_605_p2[32'd7];

assign tmp_38_i_fu_580_p3 = {{res_i_reg_404}, {1'd0}};

assign tmp_3_i_i_cast_fu_661_p1 = tmp_3_i_i_fu_643_p8;

assign tmp_3_i_i_fu_643_p8 = {{{{{{{tmp_38_fu_611_p3}, {1'd0}}, {tmp_42_fu_619_p3}}, {1'd0}}, {tmp_44_fu_627_p3}}, {1'd0}}, {tmp_45_fu_635_p3}};

assign tmp_42_fu_619_p3 = v_assign_fu_605_p2[32'd5];

assign tmp_44_fu_627_p3 = v_assign_fu_605_p2[32'd3];

assign tmp_45_fu_635_p3 = v_assign_fu_605_p2[32'd1];

assign tmp_46_fu_715_p1 = c_fu_665_p2[1:0];

assign tmp_6_i_i_cast_fu_701_p1 = tmp_6_i_i_fu_691_p4;

assign tmp_6_i_i_fu_691_p4 = {{{tmp_29_fu_671_p4}, {2'd0}}, {tmp_30_fu_681_p4}};

assign tmp_77_i_i_fu_788_p1 = max_idx_i_i_reg_345;

assign tmp_7_i_i_cast_fu_729_p1 = tmp_7_i_i_fu_719_p4;

assign tmp_7_i_i_fu_719_p4 = {{{tmp_31_fu_705_p4}, {2'd0}}, {tmp_46_fu_715_p1}};

assign tmp_9_i_i_cast3_fu_763_p2 = (tmp_27_fu_749_p3 + tmp_28_fu_756_p3);

assign tmp_fu_599_p2 = (l_b_linear_bn_softma_6_q0 ^ 8'd255);

assign tmp_i_i_cast_fu_769_p1 = tmp_32_reg_1018;

assign tmp_s_fu_797_p4 = {{f_assign_8_to_int_fu_793_p1[30:23]}};

assign v_assign_fu_605_p2 = (tmp_fu_599_p2 ^ temp1_q0);

always @ (posedge ap_clk) begin
    f_idx_i_reg_932[0] <= 1'b0;
    max_idx_i_i_cast5_reg_972[31:4] <= 28'b0000000000000000000000000000;
    tmp_77_i_i_reg_1028[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //ebnn_compute
