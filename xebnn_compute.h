// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XEBNN_COMPUTE_H
#define XEBNN_COMPUTE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xebnn_compute_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Inputint_BaseAddress;
    u32 Outputcontrl_BaseAddress;
    u32 Outputint_BaseAddress;
} XEbnn_compute_Config;
#endif

typedef struct {
    u32 Inputint_BaseAddress;
    u32 Outputcontrl_BaseAddress;
    u32 Outputint_BaseAddress;
    u32 IsReady;
} XEbnn_compute;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XEbnn_compute_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XEbnn_compute_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XEbnn_compute_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XEbnn_compute_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XEbnn_compute_Initialize(XEbnn_compute *InstancePtr, u16 DeviceId);
XEbnn_compute_Config* XEbnn_compute_LookupConfig(u16 DeviceId);
int XEbnn_compute_CfgInitialize(XEbnn_compute *InstancePtr, XEbnn_compute_Config *ConfigPtr);
#else
int XEbnn_compute_Initialize(XEbnn_compute *InstancePtr, const char* InstanceName);
int XEbnn_compute_Release(XEbnn_compute *InstancePtr);
#endif

void XEbnn_compute_Start(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_IsDone(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_IsIdle(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_IsReady(XEbnn_compute *InstancePtr);
void XEbnn_compute_EnableAutoRestart(XEbnn_compute *InstancePtr);
void XEbnn_compute_DisableAutoRestart(XEbnn_compute *InstancePtr);

u32 XEbnn_compute_Get_input_r_BaseAddress(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_input_r_HighAddress(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_input_r_TotalBytes(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_input_r_BitWidth(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_input_r_Depth(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Write_input_r_Words(XEbnn_compute *InstancePtr, int offset, int *data, int length);
u32 XEbnn_compute_Read_input_r_Words(XEbnn_compute *InstancePtr, int offset, int *data, int length);
u32 XEbnn_compute_Write_input_r_Bytes(XEbnn_compute *InstancePtr, int offset, char *data, int length);
u32 XEbnn_compute_Read_input_r_Bytes(XEbnn_compute *InstancePtr, int offset, char *data, int length);
u32 XEbnn_compute_Get_output_r_BaseAddress(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_output_r_HighAddress(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_output_r_TotalBytes(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_output_r_BitWidth(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Get_output_r_Depth(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_Write_output_r_Words(XEbnn_compute *InstancePtr, int offset, int *data, int length);
u32 XEbnn_compute_Read_output_r_Words(XEbnn_compute *InstancePtr, int offset, int *data, int length);
u32 XEbnn_compute_Write_output_r_Bytes(XEbnn_compute *InstancePtr, int offset, char *data, int length);
u32 XEbnn_compute_Read_output_r_Bytes(XEbnn_compute *InstancePtr, int offset, char *data, int length);

void XEbnn_compute_InterruptGlobalEnable(XEbnn_compute *InstancePtr);
void XEbnn_compute_InterruptGlobalDisable(XEbnn_compute *InstancePtr);
void XEbnn_compute_InterruptEnable(XEbnn_compute *InstancePtr, u32 Mask);
void XEbnn_compute_InterruptDisable(XEbnn_compute *InstancePtr, u32 Mask);
void XEbnn_compute_InterruptClear(XEbnn_compute *InstancePtr, u32 Mask);
u32 XEbnn_compute_InterruptGetEnabled(XEbnn_compute *InstancePtr);
u32 XEbnn_compute_InterruptGetStatus(XEbnn_compute *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
